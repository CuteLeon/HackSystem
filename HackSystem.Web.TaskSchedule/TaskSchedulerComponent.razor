@inherits ProgramComponentBase
@inject ILogger<TaskSchedulerComponent> Logger
@inject IServiceScopeFactory ServiceScopeFactory

<ResizeableView ResizeableOption="new ResizeableOption() { Left = 20, Top =10, Width=900, Height=600, Z_Index=this.ProgramDetail.Z_Index }">
    <div class="modal-dialog m-0 flex-fill shadow modal-dialog-scrollable" role="dialog" style="max-width:none;max-height:none;height:100%;">
        <div class="modal-content border-primary overflow-hidden" style="height: 100%;">
            <DraggableHandle DragTarget=".position-fixed">
                <div class="modal-header bg-light py-2">
                    <h5 class="modal-title" id="exampleModalLabel">Task Scheduler</h5>
                    <button type="button" class="close" @onclick="this.OnClose">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </DraggableHandle>
            <div class="modal-body">
                <AuthorizeView Roles="@CommonSense.Roles.CommanderRole">
                    <Authorized>
                        <div class="container-fluid">
                            <!-- Top control button group -->
                            <div class="row my-2 justify-content-between">
                                <p class="col-auto h4">Tasks</p>
                                <div class="col-auto">
                                    <div class="btn-group btn-group-sm shadow-sm" role="group" aria-label="Task control button">
                                        <button type="button" class="btn btn-info" @onclick=@this.LoadTasks>Refresh</button>
                                        <button type="button" class="btn btn-primary" @onclick=@this.AddTasks>Create</button>
                                        <button type="button" class="btn btn-danger" @onclick=@this.ClearTasks>Clear</button>
                                    </div>
                                </div>
                            </div>
                            <!-- Cards container -->
                            <div class="row">
                                @foreach (var task in this.TaskDetails)
                                {
                                    <div @key=@task.TaskID class="col p-1">
                                        <TaskDetailComponent @key=@task.TaskID TaskDetail=@task OnExecuteTask="@this.ExecuteTask"></TaskDetailComponent>
                                    </div>
                                }
                            </div>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <div class="d-inline-block w-100 p-5 text-center">
                            <i class="fas fa-4x fa-user-astronaut text-primary my-3"></i>
                            <p class="h4 text-secondary">Please login as a Commander!</p>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>
    </div>
</ResizeableView>

@code {
    public List<TaskDetailResponse> TaskDetails { get; set; } = new();

    public override void Dispose()
    {
    }
}
