@inject IJSRuntime jsRuntime

<div id="@this.ResizeTargetId"
     class="position-fixed user-select-none flex-nowrap text-nowrap"
     @onmousedown=@this.MouseDown
     @ontouchstart=@this.TouchStart
     style="padding:@(this.IsMaximized()?0:this.BorderSize)px; z-index:@this.TierIndex; pointer-events:auto; @this.GetWindowSizeStyle()">

    @if (!this.IsMaximized())
    {
        <div class="position-absolute" style="width:@(this.CornerSize)px;height:@(this.CornerSize)px;left:0px;top:0px;cursor:nw-resize"
         @onmousedown=@((e)=>this.OnMouseDown(e, "nw-resize")) @ontouchstart=@((e)=>this.OnTouchStart(e, "nw-resize"))></div>
        <div class="position-absolute" style="height:@(this.BorderSize)px;left:@(this.CornerSize)px;top:0px;right:@(this.CornerSize)px;cursor: n-resize"
         @onmousedown=@((e)=>this.OnMouseDown(e, "n-resize")) @ontouchstart=@((e)=>this.OnTouchStart(e, "n-resize"))></div>
        <div class="position-absolute" style="width:@(this.CornerSize)px;height:@(this.CornerSize)px;right:0px;top:0px;cursor: ne-resize"
         @onmousedown=@((e)=>this.OnMouseDown(e, "ne-resize")) @ontouchstart=@((e)=>this.OnTouchStart(e, "ne-resize"))></div>
        <div class="position-absolute" style="width:@(this.BorderSize)px;left:0px;top:@(this.CornerSize)px;bottom:@(this.CornerSize)px;cursor:w-resize"
         @onmousedown=@((e)=>this.OnMouseDown(e, "w-resize")) @ontouchstart=@((e)=>this.OnTouchStart(e, "w-resize"))></div>
        <div class="position-absolute" style="width:@(this.BorderSize)px;top:@(this.CornerSize)px;right:0px;bottom:@(this.CornerSize)px;cursor:e-resize"
         @onmousedown=@((e)=>this.OnMouseDown(e, "e-resize")) @ontouchstart=@((e)=>this.OnTouchStart(e, "e-resize"))></div>
        <div class="position-absolute" style="width:@(this.CornerSize)px;height:@(this.CornerSize)px;left:0px;bottom:0px;cursor:sw-resize"
         @onmousedown=@((e)=>this.OnMouseDown(e, "sw-resize")) @ontouchstart=@((e)=>this.OnTouchStart(e, "sw-resize"))></div>
        <div class="position-absolute" style="height:@(this.BorderSize)px;left:@(this.CornerSize)px;right:@(this.CornerSize)px;bottom:0px;cursor: s-resize"
         @onmousedown=@((e)=>this.OnMouseDown(e, "s-resize")) @ontouchstart=@((e)=>this.OnTouchStart(e, "s-resize"))></div>
        <div class="position-absolute" style="width:@(this.CornerSize)px;height:@(this.CornerSize)px;right:0px;bottom:0px;cursor:se-resize"
         @onmousedown=@((e)=>this.OnMouseDown(e, "se-resize")) @ontouchstart=@((e)=>this.OnTouchStart(e, "se-resize"))></div>
    }

    <div class="shadow-lg rounded w-100 h-100" style="max-width:none;max-height:none;">
        @this.ChildContent
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<EventArgs> OnWindowFocusIn { get; set; }

    [Parameter]
    public DotNetObjectReference<IResizeableComponent> ResizeableReference { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public string ResizeTargetId { get; set; }

    [Parameter]
    public string Left { get; set; } = "auto";

    [Parameter]
    public string Top { get; set; } = "auto";

    [Parameter]
    public string Width { get; set; } = "auto";

    [Parameter]
    public string Height { get; set; } = "auto";

    [Parameter]
    public ProgramWindowStates WindowState { get; set; } = ProgramWindowStates.Normal;

    [Parameter]
    public int BorderSize { get; set; } = 6;

    [Parameter]
    public int CornerSize { get; set; } = 12;

    [Parameter]
    public int TierIndex { get; set; }

    protected bool IsMaximized() => this.WindowState == ProgramWindowStates.Maximized;

    private IJSObjectReference resizeableModuleReference;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.resizeableModuleReference = await jsRuntime
            .InvokeAsync<IJSObjectReference>("import", "./_content/HackSystem.Web.ProgramPlatform/blazor.resizeable.js");
    }

    private string GetWindowSizeStyle() => this.WindowState switch
    {
        ProgramWindowStates.Normal => $"top:{this.Top}; left:{this.Left}; width:{this.Width}; height:{this.Height};",
        ProgramWindowStates.Maximized => $"top:inherit;left:inherit;width:inherit;height:calc(100% - {ComponentContract.TopBarHeight}px);",
        ProgramWindowStates.Minimized => $"display:none;",
        _ => string.Empty
    };

    private async Task MouseDown(MouseEventArgs args) => await this.OnFocusIn();

    private async Task TouchStart(TouchEventArgs args) => await this.OnFocusIn();

    protected async Task OnFocusIn()
    {
        if (!this.OnWindowFocusIn.HasDelegate) return;
        await this.OnWindowFocusIn.InvokeAsync();
    }

    private async Task OnMouseDown(MouseEventArgs args, string cursor)
    {
        if (args.Button != 0) return;
        await this.resizeableModuleReference.InvokeVoidAsync(
            "resizeStart",
            this.ResizeableReference,
            true, args.ClientX, args.ClientY,
            this.ResizeTargetId, cursor);
    }

    private async Task OnTouchStart(TouchEventArgs args, string cursor)
    {
        await this.resizeableModuleReference.InvokeVoidAsync(
            "resizeStart",
            this.ResizeableReference,
            false, args.Touches[0].ClientX, args.Touches[0].ClientY,
            this.ResizeTargetId, cursor);
    }
}
