@inject IJSRuntime jsRuntime

<div class="mt-n4 px-2 position-relative" @ontouchend="@this.OnTouchEnd" @onclick="@this.OnClick">
    <figure id=@this.DockIconId data-toggle="popover" data-placement="top" data-trigger="hover" data-original-title="Popover" data-content="Content.">
        <img src="@UserProgramMap.Program.IconUri" class="img-fluid" style="width:75px;height:75px;" />
        <figcaption class="text-white font-weight-bold text-center stretched-link" style="text-shadow: 0px 0px 5px #000, 0px 0px 7px #222;"
                    onmouseover="dockEvents.mouseOverIcon(this)" onmouseout="dockEvents.mouseOutIcon(this)" onmousedown="dockEvents.mouseDownIcon(this)" onmouseup="dockEvents.mouseUpIcon(this)">
        </figcaption>
    </figure>
</div>

@code {
    [Parameter]
    public EventCallback<ProgramIconEventArgs> OnIconSelect { get; set; }

    [Parameter]
    public UserProgramMap UserProgramMap { get; set; }

    protected string DockIconId { get => $"dockicon_{this.UserProgramMap.Program.Id}"; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            // TODO: LEON: Split to a independent sevice to manage popover
            await this.jsRuntime.InvokeVoidAsync("popover.initPopover", $"#{this.DockIconId}");
        }
    }
}
