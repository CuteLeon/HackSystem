@inject IPopoverHandler popoverHandler

<div class="mt-n4 px-2 position-relative" @ontouchend="@this.OnTouchEnd" @onclick="@this.OnClick">
	<figure id=@this.DockIconId>
		<img src="@UserProgramMap.Program.IconUri" class="img-fluid" style="width:75px;height:75px;" />
		<figcaption class="text-white font-weight-bold text-center stretched-link" style="text-shadow: 0px 0px 5px #000, 0px 0px 7px #222;"
					onmouseover="dockEvents.mouseOverIcon(this)" onmouseout="dockEvents.mouseOutIcon(this)" onmousedown="dockEvents.mouseDownIcon(this)" onmouseup="dockEvents.mouseUpIcon(this)">
		</figcaption>
	</figure>
	<div class="d-none">
		<div id=@this.DockIconPopoverHeaderId>
			<div class="popover-header p-1 m-0 w-100 row justify-content-between">
				<h6 class="col m-1 p-0">@(this.UserProgramMap.Rename ?? this.UserProgramMap.Program.Name)</h6>
				<div class="col-auto p-0 btn-group btn-group-sm" data-programid="@this.UserProgramMap.Program.Id">
					<a role="button" onclick=""
					   class="btn p-1 btn-outline-primary" style="width:30px; max-width:30px">
						<span class="fas fa-rocket"></span>
					</a>
					<a role="button" onclick=""
					   class="btn p-1 btn-@(this.UserProgramMap.PinToDock?string.Empty:"outline-")primary" style="width:30px; max-width:30px">
						<span class="fas fa-plane-@(this.UserProgramMap.PinToDock?"departure":"arrival")"></span>
					</a>
				</div>
			</div>
		</div>
	</div>
	<div id=@this.DockIconPopoverContentId class="d-none">
		@{
			var windows = this.UserProgramMap.Program.GetProcessDetails()
				.SelectMany(process => process.GetWindowDetails())
				.OrderByDescending(window => window.StickyTopTier)
				.ThenByDescending(window => window.ProcessDetail.ProcessId)
				.ToArray();
			if (windows.Any())
			{
				@foreach (var window in windows)
				{
					var windowItemKey = $"popover_window_{window.WindowId}";
					<div @key=@windowItemKey class="btn-group btn-group-sm mb-1" style="width:250px;"
			 data-programid="@window.ProcessDetail.ProgramDetail.Id"
			 data-processid="@window.ProcessDetail.ProcessId"
			 data-windowid="@window.WindowId">
						<a role="button" onclick="programDock.windowClick(this)"
			   	class="btn text-truncate btn-@(window.WindowState== ProgramWindowStates.Minimized?"outline-info":"warning")">
							<div class="row px-1">
								<div class="col text-truncate"><strong>@window.Caption</strong></div>
								<div class="col-auto"><em>@window.ProcessDetail.ProcessId</em></div>
							</div>
						</a>
						<a role="button" onclick="programDock.windowStickyTop(this)"
			   	class="btn p-1 btn-@(window.StickyTopTier?string.Empty:"outline-")primary" style="width:30px; max-width:30px">
							<span class="fas fa-map-marker@(window.StickyTopTier?string.Empty:"-alt")"></span>
						</a>
						<a role="button" onclick="programDock.windowClose(this)"
			   	class="btn p-1 btn-outline-danger" style="width:30px; max-width:30px">
							<span class="fas fa-times"></span>
						</a>
					</div>
				}
			}
			else
			{
				<p class="mx-3 text-center text-muted p-0" style="width:250px;"><em>No windows launched.<br />(๑•̀ㅂ•́)و✧</em></p>
			}
		}
	</div>
</div>

@code {
	[Parameter]
	public EventCallback<ProgramIconEventArgs> OnIconSelect { get; set; }

	[Parameter]
	public UserProgramMap UserProgramMap { get; set; }

	protected string DockIconId { get => $"dockicon_{this.UserProgramMap.Program.Id}"; }

	protected string DockIconPopoverContentId { get => $"popoverContent_{this.DockIconId}"; }

	protected string DockIconPopoverHeaderId { get => $"popoverHeader_{this.DockIconId}"; }

	private bool pendingRefreshWindows = false;
}
