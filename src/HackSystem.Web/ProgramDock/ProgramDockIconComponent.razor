@inject IPopoverHandler popoverHandler
@inject IIntermediaryEventHandler<WindowChangeEvent> windowChangeEventHandler

<div class="mt-n4 px-2 position-relative" @ontouchend="@this.OnTouchEnd" @onclick="@this.OnClick">
    <figure id=@this.DockIconId>
        <img src="@UserProgramMap.Program.IconUri" class="img-fluid" style="width:75px;height:75px;" />
        <figcaption class="text-white font-weight-bold text-center stretched-link" style="text-shadow: 0px 0px 5px #000, 0px 0px 7px #222;"
                    onmouseover="dockEvents.mouseOverIcon(this)" onmouseout="dockEvents.mouseOutIcon(this)" onmousedown="dockEvents.mouseDownIcon(this)" onmouseup="dockEvents.mouseUpIcon(this)">
        </figcaption>
    </figure>
    <div id=@($"popover_{this.DockIconId}") class="d-none">
        @{
            var windows = this.UserProgramMap.Program.GetProcessDetails().SelectMany(process => process.GetWindowDetails());
            if (windows.Any())
            {
                <div class="btn-group-vertical btn-group-sm">
                    @foreach (var window in windows)
                    {
                        var processItemKey = $"{this.DockIconId}_window_{window.WindowId}";
                        <a @key=processItemKey role="button" class="btn btn-light" @onclick=this.OnClickWindow click="e=>alert(e);">
                            @window.Caption <em class="text-right">Process:@window.ProcessDetail.ProcessId</em>
                        </a>
                    }
                </div>
            }
            else
            {
                <p class="mx-3 mb-0 text-muted"><em>No windows launched.</em></p>
            }
        }
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<ProgramIconEventArgs> OnIconSelect { get; set; }

    [Parameter]
    public UserProgramMap UserProgramMap { get; set; }

    protected string DockIconId { get => $"dockicon_{this.UserProgramMap.Program.Id}"; }

    protected string DockIconPopoverId { get => $"#popover_{this.DockIconId}"; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await this.popoverHandler.SetupPopover(new PopoverDetail()
                {
                    ShowDelay = 150,
                    IsHtmlContent = true,
                    Content = this.DockIconPopoverId,
                    Trigger = PopoverTriggers.Hover,
                    Placement = PopoverPlacements.Top,
                    TargetElemantFilter = $"#{this.DockIconId}",
                    Title = this.UserProgramMap.Rename ?? this.UserProgramMap.Program.Name,
                });
        }
    }
}
