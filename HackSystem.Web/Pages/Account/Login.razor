@page "/Login"
@inject IAuthenticationService AuthenticationService
@inject IHackSystemAuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILogger<Login> logger

<h1>Login</h1>

@if (ShowErrors) {
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="card">
    <div class="card-body">
        <h5 class="card-title">Please enter your details</h5>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">User Name</label>
                <InputText Id="userName" Class="form-control" @bind-Value="loginModel.UserName" />
                <ValidationMessage For="@(() => loginModel.UserName)" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    </div>
</div>

@code {

    private LoginDTO loginModel = new LoginDTO();
    private bool ShowErrors;
    private string Error = "";

    private async Task HandleLogin()
    {
        ShowErrors = false;
        logger.LogInformation($"页面使用登录服务登录...");
        var result = await AuthenticationService.Login(loginModel);

        logger.LogInformation($"页面登录结果：{result.Successful}");
        if (result.Successful)
        {
            logger.LogInformation($"准备转跳到桌面组件");

            logger.LogInformation($"当前Cookie内的Token: {await AuthenticationStateProvider.GetCurrentTokenAsync()}");
            var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            logger.LogInformation($"当前认证状态的声明：{string.Join("\n", state.User.Claims.Select(c=>$"{c.Type} = {c.Value}"))}");
            logger.LogInformation($"当前认证状态：{state.User.Identity.IsAuthenticated}");
            logger.LogInformation($"当前Hacker角色状态：{state.User.IsInRole("Hacker")}");
            
            NavigationManager.NavigateTo("/Desktop");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }

}
