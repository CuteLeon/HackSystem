@inject IJSRuntime jsRuntime

<nav class="navbar navbar-expand p-0 navbar-dark">
    <div class="navbar-brand p-0 ml-2">
        @* TODO: Leon: 这里优先显示激活程序的图标和名称 *@
        <img class="img-fluid" src="/LogoImageSmall.png" />
        <span>Hack System</span>
    </div>

    @* TODO: Leon: 菜单项支持 Icon *@

    <ul class="navbar-nav text-nowrap">
        @if (this.DesktopMenuContext?.MenuItems?.Any() ?? false)
        {
            foreach (var menuItem in this.DesktopMenuContext.MenuItems)
            {
                if (menuItem.SubMenuItems != null)
                {
                    <li @key="menuItem.Key" class="nav-item @(menuItem.Active?"active":string.Empty) @(menuItem.Visible?string.Empty:"d-none")">
                        <div class="dropdown">
                            <a role="button" class="nav-link dropdown-toggle @(menuItem.Enabled?string.Empty:"disabled")" data-toggle="dropdown" data-submenu @onclick="@(()=>this.DesktopMenuContext.RaiseMenuItemEvent(menuItem.MenuIdentity, menuItem))">@menuItem.Title</a>
                            <SubMenuComponent MenuItem="menuItem"></SubMenuComponent>
                        </div>
                    </li>
                }
                else
                {
                    <li @key="menuItem.Key" class="nav-item @(menuItem.Active?"active":string.Empty) @(menuItem.Visible?string.Empty:"d-none")">
                        @switch (menuItem.MenuType)
                        {
                            case MenuItem.MenuTypes.Button:
                                {
                                    <a role="button" class="nav-link @(menuItem.Enabled?string.Empty:"disabled")" @onclick="@(()=>this.DesktopMenuContext.RaiseMenuItemEvent(menuItem.MenuIdentity, menuItem))">@menuItem.Title</a>
                                    break;
                                }
                            case MenuItem.MenuTypes.CheckBox:
                                {
                                    <div class="custom-control custom-checkbox nav-link pl-4">
                                        <input type="checkbox" class="custom-control-input" @attributes="@MenuHelper.GetInputAttributions(menuItem)" id="@MenuHelper.GetInputId(menuItem)" @onchange="@(()=> { menuItem.Checked = !menuItem.Checked; this.DesktopMenuContext.RaiseMenuItemEvent(menuItem.MenuIdentity, menuItem); })">
                                        <label class="custom-control-label" for="@MenuHelper.GetInputId(menuItem)">@menuItem.Title</label>
                                    </div>
                                    break;
                                }
                            case MenuItem.MenuTypes.Radio:
                                {
                                    <div class="custom-control custom-radio nav-link pl-4">
                                        <input type="radio" class="custom-control-input" @attributes="@MenuHelper.GetInputAttributions(menuItem)" name="@menuItem.RadioGroup" id="@MenuHelper.GetInputId(menuItem)" @onchange="@(() =>{ menuItem.Checked = true; this.DesktopMenuContext.RaiseMenuItemEvent(menuItem.MenuIdentity, menuItem); })">
                                        <label class="custom-control-label" for="@MenuHelper.GetInputId(menuItem)">@menuItem.Title</label>
                                    </div>
                                    break;
                                }
                            default: break;
                        }
                    </li>
                }
            }
        }
    </ul>
</nav>

@code{
    [CascadingParameter]
    private Func<IToastContainer> GetToastContainer { get; set; }

    [CascadingParameter(Name = "DesktopMenuContext")]
    protected IMenuContext DesktopMenuContext { get; set; }
}