@inject ILogger<DynamicProgramWindow> Logger
@inject IIntermediaryCommandSender CommandSender

<ResizeableView ResizeableOption="new ResizeableOption() { Left = 20, Top =10, Width=900, Height=600 }">
    <div class="modal-dialog m-0 flex-fill modal-dialog-scrollable" role="dialog" style="max-width:none;max-height:none;height:100%;">
        <div class="modal-content border-primary overflow-hidden" style="height: 100%;">
            <DraggableHandleComponent DragTarget=".position-fixed">
                <div class="modal-header bg-light py-2">
                    <h5 class="modal-title" id="exampleModalLabel">@this.ProgramWindowDetail.Caption</h5>
                    <button type="button" class="close" onclick=@this.OnClose>
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
            </DraggableHandleComponent>
            <div class="modal-body">
                <DynamicComponent @ref=this.DynamicProgramComponent
                                  Type="this.ProgramWindowDetail.ProgramWindowType"
                                  Parameters="new Dictionary<string, object>
                                  {
                                      { nameof(ProgramComponentBase.ProcessDetail), this.ProcessDetail },
                                      { nameof(ProgramComponentBase.ProgramWindowDetail), this.ProgramWindowDetail }
                                  }">
                </DynamicComponent>
            </div>
        </div>
    </div>
</ResizeableView>

@code {
    // TODO: LEON: JS to set style="z-index:@this.ProgramWindowDetail.TierIndex"
    // TODO: LEON: Define window template style"

    [Parameter]
    public ProcessDetail ProcessDetail { get; set; }

    [Parameter]
    public ProgramWindowDetail ProgramWindowDetail { get; set; }

    public DynamicComponent DynamicProgramComponent { get; set; }

    public virtual void OnClose()
    {
        this.Logger.LogInformation($"Close entry window {this.ProgramWindowDetail.WindowId} of process {this.ProcessDetail.ProcessId}...");
        this.CommandSender.Send(new WindowDestroyCommand(this.ProgramWindowDetail));
    }
}
