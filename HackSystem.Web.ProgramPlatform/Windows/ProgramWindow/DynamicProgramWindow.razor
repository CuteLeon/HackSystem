@inject ILogger<DynamicProgramWindow> Logger
@inject IIntermediaryCommandSender CommandSender

<ResizeableView Top=@this.ProgramWindowStyle.Top
                Left=@this.ProgramWindowStyle.Left
                Width=@this.ProgramWindowStyle.Width
                Height=@this.ProgramWindowStyle.Height>
    <div class="modal-dialog m-0 flex-fill modal-dialog-scrollable" role="dialog" style="max-width:none;max-height:none;height:100%;">
        <div class="modal-content bg-transparent @this.ProgramWindowStyle.Border.ToBorderStyle() @this.ProgramWindowStyle.BorderColor.ToBorderColor() overflow-hidden" style="height: 100%;">
            <DraggableHandleComponent DragTarget=".position-fixed">
                <div class="modal-header @this.ProgramWindowStyle.CaptionBackgroundColor.ToBackgroundColor() p-1" style="@(this.ProgramWindowStyle.CaptionBackgroundColor==Colors.Transparent?"backdrop-filter:blur(5px);":string.Empty)">
                    <h6 class="modal-title @this.ProgramWindowStyle.CaptionTextColor.ToTextColor() text-nowrap text-truncate px-2 pt-1">
                        <strong>@this.ProgramWindowDetail.Caption</strong>
                    </h6>
                    <div class="btn-group btn-group-sm" role="group">
                        <button type="button" class="btn btn-outline-primary"><span class="far fa-window-minimize"></span></button>
                        <button type="button" class="btn btn-outline-primary"><span class="far fa-window-restore"></span></button>
                        <button type="button" class="btn btn-outline-primary"><span class="far fa-window-maximize"></span></button>
                        <button type="button" class="btn btn-danger" onclick=@this.OnClose><span class="far fa-window-close"></span></button>
                    </div>
                </div>
            </DraggableHandleComponent>
            <div class="modal-body @this.ProgramWindowStyle.BackgroundColor.ToBackgroundColor()" style="@(this.ProgramWindowStyle.BackgroundColor==Colors.Transparent?"backdrop-filter:blur(20px);":string.Empty)">
                <DynamicComponent @ref=this.DynamicProgramComponent
                                  Type="this.ProgramWindowDetail.ProgramWindowType"
                                  Parameters="new Dictionary<string, object>
                                  {
                                      { nameof(ProgramComponentBase.ProcessDetail), this.ProcessDetail },
                                      { nameof(ProgramComponentBase.ProgramWindowDetail), this.ProgramWindowDetail }
                                  }">
                </DynamicComponent>
            </div>
        </div>
    </div>
</ResizeableView>

@code {
    // TODO: LEON: JS to set style="z-index:@this.ProgramWindowDetail.TierIndex"

    [Parameter]
    public ProcessDetail ProcessDetail { get; set; }

    [Parameter]
    public ProgramWindowDetail ProgramWindowDetail { get; set; }

    public DynamicComponent DynamicProgramComponent { get; set; }

    public ProgramWindowStyle ProgramWindowStyle { get; set; } = new();

    public virtual void OnClose()
    {
        this.Logger.LogInformation($"Close entry window {this.ProgramWindowDetail.WindowId} of process {this.ProcessDetail.ProcessId}...");
        this.CommandSender.Send(new WindowDestroyCommand(this.ProgramWindowDetail));
    }
}
